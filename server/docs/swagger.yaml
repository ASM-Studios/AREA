basePath: /
definitions:
  models.EventDTO:
    properties:
      description:
        type: string
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/models.ParametersDTO'
        type: array
      service_id:
        type: integer
      type:
        $ref: '#/definitions/models.EventType'
    type: object
  models.EventType:
    enum:
    - action
    - reaction
    type: string
    x-enum-varnames:
    - ActionEventType
    - ReactionEventType
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.ParametersDTO:
    properties:
      description:
        type: string
      event_id:
        type: integer
      name:
        type: string
      type:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  models.WorkflowDTO:
    properties:
      description:
        type: string
      events:
        items:
          $ref: '#/definitions/models.EventDTO'
        type: array
      is_active:
        type: boolean
      name:
        type: string
      status:
        $ref: '#/definitions/models.WorkflowStatus'
      user_id:
        type: integer
    type: object
  models.WorkflowStatus:
    enum:
    - pending
    - processed
    - failed
    type: string
    x-enum-varnames:
    - WorkflowStatusPending
    - WorkflowStatusProcessed
    - WorkflowStatusFailed
host: localhost:8080
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.swagger.io/support
  description: API documentation for AREA backend
  license:
    name: GPL-3.0
    url: https://www.gnu.org/licenses/gpl-3.0.en.html#license-text
  termsOfService: http://swagger.io/terms/
  title: AREA API
  version: "1.0"
paths:
  /about.json:
    get:
      consumes:
      - application/json
      description: Get information about the server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      security:
      - Bearer: []
      summary: Get information about the server
      tags:
      - about
  /auth/health:
    get:
      consumes:
      - application/json
      description: Validate the token and return 200 if valid, 401 if expired or invalid
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Check if the JWT is valid
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and return a JWT token
      parameters:
      - description: Login
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user and return a JWT token
      parameters:
      - description: Register
        in: body
        name: Register
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Conflict
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Register a user
      tags:
      - auth
  /ping:
    get:
      consumes:
      - application/json
      description: ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Ping
      tags:
      - ping
  /publish/message:
    post:
      consumes:
      - application/json
      description: publish/Message
      parameters:
      - description: Message
        in: formData
        name: message
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Message
      tags:
      - publish/Message
  /workflow/create:
    post:
      consumes:
      - application/json
      description: Create a new workflow
      parameters:
      - description: workflow
        in: body
        name: workflow
        required: true
        schema:
          $ref: '#/definitions/models.WorkflowDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.WorkflowDTO'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Create a workflow
      tags:
      - workflow
  /workflow/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workflow by ID
      parameters:
      - description: workflow ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - Bearer: []
      summary: Delete a workflow
      tags:
      - workflow
  /workflow/list:
    get:
      consumes:
      - application/json
      description: List all workflows
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.WorkflowDTO'
            type: array
      security:
      - Bearer: []
      summary: List workflows
      tags:
      - workflow
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
