name: Docker Build

on:
  push:
    branches:
      - '**'
    tags:
      - 'v*'
    paths-ignore:
      - 'docs/**'
      - '**.md'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ACT: ${{ vars.ACT }}

jobs:
  test-client-web:
    if: "!contains(github.event.head_commit.message, 'WIP') && !contains(github.event.head_commit.message, 'wip')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'client_web/package-lock.json'

      - name: Install dependencies
        working-directory: ./client_web
        run: npm ci

      - name: Run tests
        working-directory: ./client_web
        run: npm run test

  build:
    needs: test-client-web
    if: "!contains(github.event.head_commit.message, 'WIP') && !contains(github.event.head_commit.message, 'wip')"
    runs-on: ubuntu-latest
    environment: docker-build
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: GitHub Registry Setup
        if: ${{ env.ACT != 'true' }}
        run: |
          docker buildx create --use
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Create .env files from examples
        run: |
          touch .env
          touch server/.env
          touch client_web/.env
          touch client_mobile/.env

      - name: Inject secrets into .env files
        run: |
          # Main .env
          echo "NODE_ENV=${{ secrets.NODE_ENV }}" >> .env
          echo "VITE_PORT=${{ secrets.VITE_PORT }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          cat .env

          # Client Web .env
          echo "VITE_PORT=${{ secrets.VITE_PORT }}" >> client_web/.env
          echo "VITE_ENDPOINT=${{ secrets.VITE_ENDPOINT }}" >> client_web/.env
          echo "VITE_GOOGLE_CLIENT_ID=${{ secrets.VITE_GOOGLE_CLIENT_ID }}" >> client_web/.env
          echo "VITE_GOOGLE_CLIENT_SECRET=${{ secrets.VITE_GOOGLE_CLIENT_SECRET }}" >> client_web/.env
          echo "VITE_MICROSOFT_CLIENT_ID=${{ secrets.VITE_MICROSOFT_CLIENT_ID }}" >> client_web/.env
          echo "VITE_LINKEDIN_CLIENT_ID=${{ secrets.VITE_LINKEDIN_CLIENT_ID }}" >> client_web/.env
          echo "VITE_LINKEDIN_CLIENT_SECRET=${{ secrets.VITE_LINKEDIN_CLIENT_SECRET }}" >> client_web/.env
          echo "VITE_SPOTIFY_CLIENT_ID=${{ secrets.VITE_SPOTIFY_CLIENT_ID }}" >> client_web/.env
          echo "VITE_SPOTIFY_CLIENT_SECRET=${{ secrets.VITE_SPOTIFY_CLIENT_SECRET }}" >> client_web/.env
          echo "API_URL=${{ secrets.API_URL }}" >> client_web/.env
          echo "WEB_CLIENT_URL=${{ secrets.WEB_CLIENT_URL }}" >> client_web/.env
          echo "MOBILE_CLIENT_URL=${{ secrets.MOBILE_CLIENT_URL }}" >> client_web/.env
          echo "GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> client_web/.env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}" >> client_web/.env

          # Client Mobile .env
          echo "API_URL=${{ secrets.API_URL }}" >> client_mobile/.env
          echo "WEB_CLIENT_URL=${{ secrets.WEB_CLIENT_URL }}" >> client_mobile/.env
          echo "MOBILE_CLIENT_URL=${{ secrets.MOBILE_CLIENT_URL }}" >> client_mobile/.env
          echo "GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}" >> client_mobile/.env
          echo "GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}" >> client_mobile/.env

          # Server .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> server/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> server/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> server/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> server/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> server/.env

      - name: Build and test
        run: docker compose --profile full up --build -d

      - name: Push images if on main branch
        if: ${{ github.ref == 'refs/heads/main' && env.ACT != 'true' }}
        run: docker compose push 