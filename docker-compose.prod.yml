services:
  rabbitmq:
    image: rabbitmq:4.0.4-management-alpine
    ports:
      - "15672:15672"
      - "5672:5672"
    networks:
      - area_network
    volumes:
      - ./rabbit-mq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 15s
      retries: 5
    restart: always

  mariadb:
    image: mariadb:11.4.4
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_ROOT_HOST: "%"
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - area_network
    healthcheck:
      test: [ "CMD", "mariadb-admin", "ping", "-h", "localhost", "-u", "root", "-p${DB_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
    restart: always

  server:
    build:
      context: ./server
      dockerfile: Dockerfile.prod
    ports:
      - "8080:8080"
    volumes:
      - ./ssl:/app/ssl:ro
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
      AIR_FORCE: "true"
    depends_on:
      mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - area_network
    env_file:
      - server/.env
    restart: always
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  server_action_consumer:
    build:
      context: ./server
      dockerfile: Dockerfile_action_consumer.prod
    volumes:
      - ./ssl:/app/ssl:ro
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_healthy
    networks:
      - area_network
    env_file:
      - server/.env
    restart: always

  server_reaction_consumer:
    build:
      context: ./server
      dockerfile: Dockerfile_reaction_consumer.prod
    volumes:
      - ./ssl:/app/ssl:ro
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_NAME: ${DB_NAME}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_healthy
    networks:
      - area_network
    env_file:
      - server/.env
    restart: always

  client_mobile:
    build:
      context: ./client_mobile
      dockerfile: Dockerfile.prod
    volumes:
      - mobile_builds:/app/build/app/outputs/flutter-apk
    env_file:
      - ./client_mobile/.env
    depends_on:
      server:
        condition: service_healthy
    restart: "no"
    healthcheck:
      test: [ "CMD", "test", "-f", "/app/build/app/outputs/flutter-apk/client.apk" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 150s

  client_web:
    build:
      context: ./client_web
      dockerfile: Dockerfile.prod
    volumes:
      - ./client_web:/app:rw
      - /app/node_modules
      - mobile_builds:/app/public:ro
    ports:
      - "${VITE_PORT}:8081"
    depends_on:
      server:
        condition: service_healthy
      client_mobile:
        condition: service_started
    networks:
      - area_network
    env_file:
      - ./client_web/.env
    restart: unless-stopped
    healthcheck:
      test: |
        curl --insecure --silent --fail https://localhost:8081/ || exit 1
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  healthcheck:
    image: alpine:3.20.3
    depends_on:
      mariadb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      server:
        condition: service_healthy
      client_web:
        condition: service_healthy
      client_mobile:
        condition: service_started
    environment:
      - VITE_PORT=${VITE_PORT}
    restart: "no"

volumes:
  mobile_builds:
  mariadb_data:


networks:
  area_network:
    driver: bridge
